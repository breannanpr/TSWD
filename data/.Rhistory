geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),  # Highlight top day(s)
aes(x = day, y = count),
color = "maroon",
size = 3) +
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1))
# Display the daily plot
dailycarplot
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels for top days only
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),  # Highlight top day(s)
aes(x = day, y = count),
color = "maroon",
size = 3) +
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "10 days",
date_labels = "%Y-%m-%d"
)
# Display the daily plot
dailycarplot
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels for top days only
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),  # Highlight top day(s)
aes(x = day, y = count),
color = "maroon",
size = 3) +
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "10 days",
date_labels = "%m-%d"
)
# Display the daily plot
dailycarplot
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels for top days only
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),  # Highlight top day(s)
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowest_count),
aes(x = day, y = count),
color = "brightblue",
size = 3)+
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "10 days",
date_labels = "%m-%d"
)
# Display the daily plot
dailycarplot
# Find the lowest count value(s)
lowestcarcount = min(dailycarcounts$count)
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels for top days only
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),  # Highlight top day(s)
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowest_count),
aes(x = day, y = count),
color = "brightblue",
size = 3)+
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "10 days",
date_labels = "%m-%d"
)
# Display the daily plot
dailycarplot
# Read and install the car data into a workable dataframe.
cardat = read.csv("carbitrage.csv")
# Convert the 'time_posted' column to a datetime object
cardat$time_posted = as.POSIXct(cardat$time_posted, format = "%Y-%m-%d %H:%M:%S")
# Extract day and week information
cardat = cardat %>%
mutate(day = as.Date(time_posted),
week = lubridate::floor_date(time_posted, unit = "week"),
weekday = weekdays(day))  # Extract weekday information
# Group by day and calculate the count of new cars posted
dailycarcounts = cardat %>%
group_by(day, weekday) %>%
summarize(count = n())
# Find the top day(s) of the week for posting
topcardays = dailycarcounts %>%
group_by(weekday) %>%
summarize(total_count = sum(count)) %>%
filter(total_count == max(total_count)) %>%
pull(weekday)
# Find the lowest count value(s)
lowestcarcount = min(dailycarcounts$count)
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels for top days only
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),  # Highlight top day(s)
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowest_count),
aes(x = day, y = count),
color = "brightblue",
size = 3)+
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "10 days",
date_labels = "%m-%d"
)
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels for top days only
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),  # Highlight top day(s)
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowestcarcount),
aes(x = day, y = count),
color = "brightblue",
size = 3)+
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "10 days",
date_labels = "%m-%d"
)
# Display the daily plot
dailycarplot
# Find the lowest count value(s)
lowestcarcount = min(dailycarcounts$count)
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels for top days only
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),  # Highlight top day(s)
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowestcarcount),
aes(x = day, y = count),
color = "brightblue",
size = 3)+
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "10 days",
date_labels = "%m-%d"
)
# Display the daily plot
dailycarplot
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels for top days only
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),  # Highlight top day(s)
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowestcarcount),
aes(x = day, y = count),
color = "skyblue",
size = 3)+
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "10 days",
date_labels = "%m-%d"
)
# Display the daily plot
dailycarplot
# Find the lowest count value(s)
lowestcarcount = dailycarcounts %>%
filter(month(day) == 8) %>%
summarize(lowestcarcount = min(count)) %>%
pull(lowestcarcount)
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels for top days only
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),  # Highlight top day(s)
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowestcarcount),
aes(x = day, y = count),
color = "skyblue",
size = 3)+
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "10 days",
date_labels = "%m-%d"
)
# Display the daily plot
dailycarplot
min(dailycarcounts$count)
# Find the lowest count value(s)
lowestcarcount = min(dailycarcounts$count)
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels for top days only
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),  # Highlight top day(s)
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowestcarcount),
aes(x = day, y = count),
color = "skyblue",
size = 3)+
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "10 days",
date_labels = "%m-%d"
)
# Display the daily plot
dailycarplot
# Read and install the car data into a workable dataframe.
cardat = read.csv("carbitrage.csv")
# Convert the 'time_posted' column to a datetime object
cardat$time_posted = as.POSIXct(cardat$time_posted, format = "%Y-%m-%d %H:%M:%S")
# Extract day and week information
cardat = cardat %>%
mutate(day = as.Date(time_posted),
week = lubridate::floor_date(time_posted, unit = "week"),
weekday = weekdays(day))  # Extract weekday information
# Group by day and calculate the count of new cars posted
dailycarcounts = cardat %>%
group_by(day, weekday) %>%
summarize(count = n())
# Find the top day(s) of the week for posting
topcardays = dailycarcounts %>%
group_by(weekday) %>%
summarize(total_count = sum(count)) %>%
filter(total_count == max(total_count)) %>%
pull(weekday)
# Find the lowest count value(s)
lowestcarcount = min(dailycarcounts$count)
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowestcarcount),
aes(x = day, y = count),
color = "skyblue",
size = 3)+
labs(
title = "Nearly 6000 Cars Posted on Craigslist Each Day",
subtitle = "Service Outage Spikes Data"
x = "Date",
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowestcarcount),
aes(x = day, y = count),
color = "skyblue",
size = 3)+
labs(
title = "Nearly 6000 Cars Posted on Craigslist Each Day",
subtitle = "Service Outage Spikes Data",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "20 days",
date_labels = "%m-%d"
)
# Display the daily plot
dailycarplot
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowestcarcount),
aes(x = day, y = count),
color = "skyblue",
size = 3)+
labs(
title = "Thousands of Craigslist Car Ads Posted Daily",
subtitle = "Service Interruption Disrupts Steady Ebb and Flows",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "20 days",
date_labels = "%m-%d"
)
# Display the daily plot
dailycarplot
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line() +
geom_text(
aes(label = ifelse(weekday %in% topcardays, as.character(count), "")),
vjust = -0.5,
size = 3,
hjust = 1
) +
geom_point(data = dailycarcounts %>%
filter(weekday %in% topcardays),
aes(x = day, y = count),
color = "maroon",
size = 3) +
geom_point(data = dailycarcounts %>%
filter(count == lowestcarcount),
aes(x = day, y = count),
color = "skyblue",
size = 3)+
labs(
title = "Slump Revealed in Daily Car Listings",
subtitle = "Service Interruption Disrupts Steady Ebb and Flows",
x = "Date",
y = "Count"
) +
theme_minimal() +
theme(axis.text.x = element_text(angle = 0, hjust = 1)) +
theme(axis.text.y = element_text(angle = 0, hjust = 1)) +
scale_x_date(
date_breaks = "20 days",
date_labels = "%m-%d"
)
# Display the daily plot
dailycarplot
