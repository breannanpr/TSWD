geom_line() +
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
scale_color_manual(values = c("Daily" = "blue")) +  # Add color legend
theme_minimal() +
geom_text(
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
) +
# Create a ggplot for weekly counts
weeklycarplot = ggplot(weeklycarcounts, aes(x = week, y = count)) +
geom_line() +
labs(
title = "Rate of New Cars Posted by Week",
x = "Week",
y = "Count"
) +
theme_minimal()
# Create a ggplot for daily counts
dailycarplot = ggplot(dailycarcounts, aes(x = day, y = count, color = "Daily")) +
geom_line() +
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
scale_color_manual(values = c("Daily" = "blue")) +
theme_minimal() +
geom_text(
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
) +
# Create a ggplot for weekly counts
weeklycarplot = ggplot(weeklycarcounts, aes(x = week, y = count)) +
geom_line() +
labs(
title = "Rate of New Cars Posted by Week",
x = "Week",
y = "Count"
) +
theme_minimal()
# Create a ggplot for daily counts
dailycarplot <- ggplot(dailycarcounts, aes(x = day, y = count)) +
geom_line(color = "blue") +
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
geom_text(
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)
# Create a ggplot for weekly counts
weekly_plot <- ggplot(weekly_counts, aes(x = week, y = count)) +
geom_line(color = "red") +
labs(
title = "Rate of New Cars Posted by Week",
x = "Week",
y = "Count"
) +
theme_minimal() +
geom_text(
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)
# Create a ggplot for weekly counts
weeklycarplot <- ggplot(weeklycarcounts, aes(x = week, y = count)) +
geom_line(color = "red") +
labs(
title = "Rate of New Cars Posted by Week",
x = "Week",
y = "Count"
) +
theme_minimal() +
geom_text(
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)
#arrange plots side by side
dayandweekcarcounts = dailycarplot + weeklycarplot /
plot_annotation(
title = "Posting by Day and Week",
subtitle = "A Carbitrage Comparison",
caption = "Data Source: Carbitrage Raw Data Set",
theme = theme(
plot.title = element_text(size = 14, face = "bold"),
plot.subtitle = element_text(size = 12),
plot.caption = element_text(size = 10, color = "gray")
)
)
print(dayandweekcarcounts)
# Create a ggplot
combined_plot <- ggplot() +
geom_line(data = daily_counts, aes(x = day, y = count, color = "Daily")) +
geom_line(data = weekly_counts, aes(x = week, y = count, color = "Weekly")) +
labs(
title = "Rate of New Cars Posted by Day and Week",
x = "Date or Week",
y = "Count"
) +
scale_color_manual(values = c("Daily" = "blue", "Weekly" = "red")) +  # Add color legend
theme_minimal() +
geom_text(
data = daily_counts,
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels
geom_text(
data = weekly_counts,
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)  # Add count labels
# Create a ggplot
combinedcarplot = ggplot() +
geom_line(data = dailycarcounts, aes(x = day, y = count, color = "Daily")) +
geom_line(data = weeklycarcounts, aes(x = week, y = count, color = "Weekly")) +
labs(
title = "Rate of New Cars Posted by Day and Week",
x = "Date or Week",
y = "Count"
) +
scale_color_manual(values = c("Daily" = "blue", "Weekly" = "red")) +  # Add color legend
theme_minimal() +
geom_text(
data = daily_counts,
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels
geom_text(
data = weekly_counts,
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)  # Add count labels
# Create a ggplot
combinedcarplot = ggplot() +
geom_line(data = dailycarcounts, aes(x = day, y = count, color = "Daily")) +
geom_line(data = weeklycarcounts, aes(x = week, y = count, color = "Weekly")) +
labs(
title = "Rate of New Cars Posted by Day and Week",
x = "Date or Week",
y = "Count"
) +
scale_color_manual(values = c("Daily" = "blue", "Weekly" = "red")) +  # Add color legend
theme_minimal() +
geom_text(
data = dailycarcounts,
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels
geom_text(
data = weeklycarcounts,
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)  # Add count labels
# Display the combined plot
combined_plot
# Display the combined plot
combinedcarplot
library(ggplot2)
library(dplyr)
library(forcats)  # Load the 'forcats' package
# read and install cardata into a workable dataframe.
cardat = read.csv("carbitrage.csv")
# this adjusts all text to lowercase
cardat = cardat %>%
mutate(make = tolower(make),
model = tolower(model))
#this groups and counts the cars by make and model
carcounts = cardat %>%
group_by(make, model) %>%
summarize(count = n())
# Select the top 15 most popular car makes and models
top20carcounts = carcounts %>%
mutate(make_model = paste(make, model, sep = " ")) %>%
filter(count > 500) %>%
arrange(desc(count)) %>%
head(20)
# Clean the "make_model" column to remove leading and trailing whitespace
top20carcounts$make_model <- trimws(top20carcounts$make_model)
# Filter out "Ford" and blank values from the plot
top20carcounts <- top20carcounts %>%
filter(!(make_model %in% c("ford", "")))
# Create the ggplot visualization for the modified data
ggplot(top20carcounts,
aes(x = fct_reorder(make_model, count), y = count)) +
geom_bar(stat = "identity", fill = "mediumorchid3") +
geom_text(aes(label = count), vjust = -0.5, size = 3) +  # Add count labels
coord_flip() +
labs(
title = "Ford F150 Leads Top 20 Most Popular Vehicles for Sale",
subtitle = "Craigslist Carbitrage Dataset",
x = "Make and Model",
y = "Count"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 9),
plot.title = element_text(hjust = 0),
plot.subtitle = element_text(hjust = 0)
)
####
library(ggplot2)
library(dplyr)
library(lubridate)
library(patchwork)
library(gridExtra)
# convert the time posted column to datetime, and extract week and day info
cardat$time_posted = as.POSIXct(cardat$time_posted, format = "%Y-%m-%d %H:%M:%S")
cardat = cardat %>%
mutate(day = as.Date(time_posted),
week = lubridate::floor_date(time_posted, unit = "week"))
# group by the day and count new cars posted
dailycarcounts = cardat %>%
group_by(day) %>%
summarize(count = n())
# group week and counts
weeklycarcounts <- cardat %>%
group_by(week) %>%
summarize(count = n())
# Create a ggplot
combinedcarplot = ggplot() +
geom_line(data = dailycarcounts, aes(x = day, y = count, color = "Daily")) +
geom_line(data = weeklycarcounts, aes(x = week, y = count, color = "Weekly")) +
labs(
title = "Rate of New Cars Posted by Day and Week",
x = "Date or Week",
y = "Count"
) +
scale_color_manual(values = c("Daily" = "blue", "Weekly" = "red")) +  # Add color legend
theme_minimal() +
geom_text(
data = dailycarcounts,
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels
geom_text(
data = weeklycarcounts,
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)  # Add count labels
# Display the combined plot
combinedcarplot
library(ggplot2)
library(dplyr)
library(lubridate)
library(patchwork)
# Read and install the car data into a workable dataframe.
cardat <- read.csv("carbitrage.csv")
# Convert the 'time_posted' column to a datetime object
cardat$time_posted <- as.POSIXct(cardat$time_posted, format = "%Y-%m-%d %H:%M:%S")
# Extract day and week information
cardat <- cardat %>%
mutate(day = as.Date(time_posted),
week = lubridate::floor_date(time_posted, unit = "week"))
# Group by day and calculate the count of new cars posted
daily_counts <- cardat %>%
group_by(day) %>%
summarize(count = n())
# Group by week and calculate the count of new cars posted
weekly_counts <- cardat %>%
group_by(week) %>%
summarize(count = n())
# Create a ggplot for daily and weekly counts overlaid
combined_plot <- ggplot() +
geom_line(data = daily_counts, aes(x = day, y = count, color = "Daily")) +
geom_line(data = weekly_counts, aes(x = day, y = count, color = "Weekly")) +
labs(
title = "Rate of New Cars Posted by Day and Week",
x = "Date",
y = "Count"
) +
scale_color_manual(values = c("Daily" = "blue", "Weekly" = "red")) +
theme_minimal() +
geom_text(
data = daily_counts,
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
) +  # Add count labels
geom_text(
data = weekly_counts,
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)
# Display the combined plot
combined_plot
library(ggplot2)
library(dplyr)
library(forcats)  # Load the 'forcats' package
# read and install cardata into a workable dataframe.
cardat = read.csv("carbitrage.csv")
# this adjusts all text to lowercase
cardat = cardat %>%
mutate(make = tolower(make),
model = tolower(model))
#this groups and counts the cars by make and model
carcounts = cardat %>%
group_by(make, model) %>%
summarize(count = n())
# Select the top 15 most popular car makes and models
top20carcounts = carcounts %>%
mutate(make_model = paste(make, model, sep = " ")) %>%
filter(count > 500) %>%
arrange(desc(count)) %>%
head(20)
# Clean the "make_model" column to remove leading and trailing whitespace
top20carcounts$make_model <- trimws(top20carcounts$make_model)
# Filter out "Ford" and blank values from the plot
top20carcounts <- top20carcounts %>%
filter(!(make_model %in% c("ford", "")))
# Create the ggplot visualization for the modified data
ggplot(top20carcounts,
aes(x = fct_reorder(make_model, count), y = count)) +
geom_bar(stat = "identity", fill = "mediumorchid3") +
geom_text(aes(label = count), vjust = -0.5, size = 3) +  # Add count labels
coord_flip() +
labs(
title = "Ford F150 Leads Top 20 Most Popular Vehicles for Sale",
subtitle = "Craigslist Carbitrage Dataset",
x = "Make and Model",
y = "Count"
) +
theme_minimal() +
theme(
axis.text.y = element_text(size = 9),
plot.title = element_text(hjust = 0),
plot.subtitle = element_text(hjust = 0)
)
####
1. Thursday, Sept 21 @ 12:01 - CSU Global
# Convert the 'time_posted' column to a datetime object
cardat$time_posted <- as.POSIXct(cardat$time_posted, format = "%Y-%m-%d %H:%M:%S")
# Extract day and week information
cardat <- cardat %>%
mutate(day = as.Date(time_posted),  # Convert to Date format
week = lubridate::floor_date(time_posted, unit = "week"))
# Group by day and calculate the count of new cars posted
daily_counts <- cardat %>%
group_by(day) %>%
summarize(count = n())
# Group by week and calculate the count of new cars posted
weekly_counts <- cardat %>%
group_by(week) %>%
summarize(count = n())
# Create a ggplot for daily counts
daily_plot <- ggplot(daily_counts, aes(x = day, y = count, color = "Daily")) +
geom_line() +
labs(
title = "Rate of New Cars Posted by Day and Week",
x = "Date",
y = "Count"
) +
scale_color_manual(values = c("Daily" = "blue")) +  # Add color legend
theme_minimal() +
geom_text(
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)  # Add count labels
# Create a ggplot for weekly counts
weekly_plot <- ggplot(weekly_counts, aes(x = day, y = count, color = "Weekly")) +
geom_line() +
scale_color_manual(values = c("Weekly" = "red")) +  # Add color legend
geom_text(
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)  # Add count labels
# Overlay the daily and weekly plots
combined_plot <- daily_plot + weekly_plot
# Display the combined plot
combined_plot
####
library(ggplot2)
library(dplyr)
library(lubridate)
library(patchwork)
# Convert the 'time_posted' column to a datetime object
cardat$time_posted <- as.POSIXct(cardat$time_posted, format = "%Y-%m-%d %H:%M:%S")
# Extract day and week information
cardat <- cardat %>%
mutate(day = as.Date(time_posted),  # Convert to Date format
week = lubridate::floor_date(time_posted, unit = "week"))
# Group by day and calculate the count of new cars posted
daily_counts <- cardat %>%
group_by(day) %>%
summarize(count = n())
# Group by week and calculate the count of new cars posted
weekly_counts <- cardat %>%
group_by(week) %>%
summarize(count = n())
# Create a ggplot for daily counts
daily_plot <- ggplot(daily_counts, aes(x = day, y = count, color = "Daily")) +
geom_line() +
labs(
title = "Rate of New Cars Posted by Day and Week",
x = "Date",
y = "Count"
) +
scale_color_manual(values = c("Daily" = "blue")) +  # Add color legend
theme_minimal() +
geom_text(
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)  # Add count labels
# Create a ggplot for weekly counts
weekly_plot <- ggplot(weekly_counts, aes(x = day, y = count, color = "Weekly")) +
geom_line() +
scale_color_manual(values = c("Weekly" = "red")) +  # Add color legend
geom_text(
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)  # Add count labels
# Overlay the daily and weekly plots
combined_plot <- daily_plot + weekly_plot
# Display the combined plot
combined_plot
####
library(ggplot2)
library(dplyr)
library(lubridate)  # Load the 'lubridate' package for date manipulation
library(patchwork)  # Load the 'patchwork' package
# Read and install the car data into a workable dataframe.
cardat <- read.csv("carbitrage.csv")
# Convert the 'time_posted' column to a datetime object
cardat$time_posted <- as.POSIXct(cardat$time_posted, format = "%Y-%m-%d %H:%M:%S")
# Extract day and week information
cardat <- cardat %>%
mutate(day = as.Date(time_posted),
week = lubridate::floor_date(time_posted, unit = "week"))
# Group by day and calculate the count of new cars posted
daily_counts <- cardat %>%
group_by(day) %>%
summarize(count = n())
# Group by week and calculate the count of new cars posted
weekly_counts <- cardat %>%
group_by(week) %>%
summarize(count = n())
# Create a ggplot for daily counts
daily_plot <- ggplot(daily_counts, aes(x = day, y = count)) +
geom_line(color = "blue") +
labs(
title = "Rate of New Cars Posted by Day",
x = "Date",
y = "Count"
) +
theme_minimal() +
geom_text(
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)  # Add count labels
# Create a ggplot for weekly counts
weekly_plot <- ggplot(weekly_counts, aes(x = week, y = count)) +
geom_line(color = "red") +
labs(
title = "Rate of New Cars Posted by Week",
x = "Week",
y = "Count"
) +
theme_minimal() +
geom_text(
aes(label = count),
vjust = -0.5,
size = 3,
hjust = 1
)  # Add count labels
# Arrange the plots using 'patchwork' side by side
combined_plot <- daily_plot / weekly_plot
# Display the combined plot
combined_plot
